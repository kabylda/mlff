[tool.poetry]
name = "mlff"
version = "1.0.0"
description = "Machine learning force fields with JAX."
authors = ["Thorben Frank, Adil Kabylda, Marcel Langer, Florian Knoop"]
license = "MIT"


[tool.poetry.dependencies]
python = ">=3.9"
numpy = "*"
clu = "0.0.9"
e3x = "*"
flax = "*"
jaxopt = "*"
optax = "*"
orbax-checkpoint = "*"
portpicker = "*"
pandas = "*"
scikit-learn = "*"
ase = "*"
tqdm = "*"
wandb = "*"
pyyaml = "*"
pytest = "*"
h5py = "*"
ml_collections = "*"
jraph = { git = "https://github.com/kabylda/jraph.git", branch = "master", optional = false }
jax-md = { git = "https://github.com/kabylda/jax-md.git", branch = "main" , optional = false }
glp = { git = "https://github.com/kabylda/glp.git", branch = "electrostatics_neighbourlist", optional = false }


[tool.poetry.scripts]
evaluate = "mlff.cAPI.mlff_eval:evaluate"
train = "mlff.cAPI.mlff_train:train"
run_md = "mlff.cAPI.mlff_md:run_md"
run_relaxation = "mlff.cAPI.mlff_structure_relaxation:run_relaxation"
analyse_md = "mlff.cAPI.mlff_analyse:analyse_md"
train_so3krates = "mlff.cAPI.mlff_train_so3krates:train_so3krates"
train_so3kratACE = "mlff.cAPI.mlff_train_so3kratace:train_so3kratace"
trajectory_to_xyz = "mlff.cAPI.mlff_postprocessing:trajectory_to_xyz"
to_mlff_input = "mlff.cAPI.mlff_input_processing:to_mlff_input"
train_so3krates_sparse = "mlff.CLI.run_training:train_so3krates_sparse"
train_itp_net = "mlff.CLI.run_training_itp_net:train_itp_net"
evaluate_itp_net = "mlff.CLI.run_evaluation_itp_net:evaluate_itp_net"
evaluate_itp_net_on = "mlff.CLI.run_evaluation_itp_net_on:evaluate_itp_net_on"
fine_tune_so3krates_sparse = "mlff.CLI.run_fine_tuning:fine_tune_so3krates_sparse"
evaluate_so3krates_sparse = "mlff.CLI.run_evaluation:evaluate_so3krates_sparse"
evaluate_so3krates_sparse_on = "mlff.CLI.run_evaluation_on:evaluate_so3krates_sparse_on"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

#[build-system]
#requires = ["setuptools>=42", "wheel"]
#build-backend = "setuptools.build_meta"
#
#[project]
#name = "mlff"
#version = "1.0"
#description = "Build Neural Networks for Force Fields with JAX"
#requires-python = ">=3.9"
#dependencies = [
#    "numpy",
#    "clu == 0.0.9",
#    "e3x",
#    "flax",
#    "jaxopt",
#    "jraph",
#    "optax",
#    "orbax-checkpoint",
#    "portpicker",
#    "pandas",
#    "scikit-learn",
#    "ase",
#    "tqdm",
#    "wandb",
#    "pyyaml",
#    "pytest",
#    "h5py",
#    "ml_collections"
#]
#
#[project.scripts]
#evaluate = "mlff.cAPI.mlff_eval:evaluate"
#train = "mlff.cAPI.mlff_train:train"
#run_md = "mlff.cAPI.mlff_md:run_md"
#run_relaxation = "mlff.cAPI.mlff_structure_relaxation:run_relaxation"
#analyse_md = "mlff.cAPI.mlff_analyse:analyse_md"
#train_so3krates = "mlff.cAPI.mlff_train_so3krates:train_so3krates"
#train_so3kratACE = "mlff.cAPI.mlff_train_so3kratace:train_so3kratace"
#trajectory_to_xyz = "mlff.cAPI.mlff_postprocessing:trajectory_to_xyz"
#to_mlff_input = "mlff.cAPI.mlff_input_processing:to_mlff_input"
#train_so3krates_sparse = "mlff.CLI.run_training:train_so3krates_sparse"
#train_itp_net = "mlff.CLI.run_training_itp_net:train_itp_net"
#evaluate_itp_net = "mlff.CLI.run_evaluation_itp_net:evaluate_itp_net"
#evaluate_itp_net_on = "mlff.CLI.run_evaluation_itp_net_on:evaluate_itp_net_on"
#fine_tune_so3krates_sparse = "mlff.CLI.run_fine_tuning:fine_tune_so3krates_sparse"
#evaluate_so3krates_sparse = "mlff.CLI.run_evaluation:evaluate_so3krates_sparse"
#evaluate_so3krates_sparse_on = "mlff.CLI.run_evaluation_on:evaluate_so3krates_sparse_on"
